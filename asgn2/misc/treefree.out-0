==32448== Memcheck, a memory error detector
==32448== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==32448== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==32448== Command: treefree -0
==32448== 
Command: treefree -0
[0]0x5a24110->tree::tree(tree_ptr): parent=nullptr
[1]0x5a24220->tree::tree(tree_ptr): parent=[0]0x5a24110
[2]0x5a24410->tree::tree(tree_ptr): parent=[0]0x5a24110
[3]0x5a24660->tree::tree(tree_ptr): parent=[2]0x5a24410
[4]0x5a248b0->tree::tree(tree_ptr): parent=[2]0x5a24410
[5]0x5a24b00->tree::tree(tree_ptr): parent=[2]0x5a24410
[6]0x5a24cf0->tree::tree(tree_ptr): parent=[1]0x5a24220
[7]0x5a24f40->tree::tree(tree_ptr): parent=[1]0x5a24220
[8]0x5a25190->tree::tree(tree_ptr): parent=[1]0x5a24220
[seq]address: key -> value (use count)
void tree::print(size_t): [0]0x5a24110: ".." -> [0]0x5a24110 (5)
void tree::print(size_t): [0]0x5a24110: "bar" -> [2]0x5a24410 (5)
void tree::print(size_t):    [2]0x5a24410: ".." -> [0]0x5a24110 (5)
void tree::print(size_t):    [2]0x5a24410: "quuux" -> [5]0x5a24b00 (2)
void tree::print(size_t):       [5]0x5a24b00: ".." -> [2]0x5a24410 (6)
void tree::print(size_t):    [2]0x5a24410: "quux" -> [4]0x5a248b0 (2)
void tree::print(size_t):       [4]0x5a248b0: ".." -> [2]0x5a24410 (6)
void tree::print(size_t):    [2]0x5a24410: "qux" -> [3]0x5a24660 (2)
void tree::print(size_t):       [3]0x5a24660: ".." -> [2]0x5a24410 (6)
void tree::print(size_t): [0]0x5a24110: "foo" -> [1]0x5a24220 (5)
void tree::print(size_t):    [1]0x5a24220: ".." -> [0]0x5a24110 (5)
void tree::print(size_t):    [1]0x5a24220: "quuux" -> [8]0x5a25190 (2)
void tree::print(size_t):       [8]0x5a25190: ".." -> [1]0x5a24220 (6)
void tree::print(size_t):    [1]0x5a24220: "quux" -> [7]0x5a24f40 (2)
void tree::print(size_t):       [7]0x5a24f40: ".." -> [1]0x5a24220 (6)
void tree::print(size_t):    [1]0x5a24220: "qux" -> [6]0x5a24cf0 (2)
void tree::print(size_t):       [6]0x5a24cf0: ".." -> [1]0x5a24220 (6)
==32448== 
==32448== HEAP SUMMARY:
==32448==     in use at exit: 1,863 bytes in 35 blocks
==32448==   total heap usage: 40 allocs, 5 frees, 2,002 bytes allocated
==32448== 
==32448== LEAK SUMMARY:
==32448==    definitely lost: 72 bytes in 1 blocks
==32448==    indirectly lost: 1,764 bytes in 33 blocks
==32448==      possibly lost: 0 bytes in 0 blocks
==32448==    still reachable: 27 bytes in 1 blocks
==32448==                       of which reachable via heuristic:
==32448==                         stdstring          : 27 bytes in 1 blocks
==32448==         suppressed: 0 bytes in 0 blocks
==32448== Rerun with --leak-check=full to see details of leaked memory
==32448== 
==32448== For counts of detected and suppressed errors, rerun with: -v
==32448== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
